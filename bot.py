import telebot
from telebot import types
from database import DataBase
from stages import Stages
import config
from recipy_manager import RecipyManager
from bot_utils import (create_menu_kb, create_menu_text, create_add_text, create_delete_kb, create_possible_kb,
                       create_recipy_text)
import sys

bot = telebot.TeleBot(config.BOT_TOKEN)
db = DataBase(config.DB_CACHE_PATH, config.DB_LOGGING, config.DB_SAVE_ITER)
rm = RecipyManager(logging=True)


@bot.message_handler(commands=["start"])
def handle_start(message):
    chat_id = message.chat.id

    db.create_user(chat_id, message.from_user.first_name)
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(types.InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å!", callback_data=f"start"))

    msg = bot.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} üëã!\n\n"
                                    f"–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ç–µ–±–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è —É —Ç–µ–±—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ ü•ï.\n\n"
                                    f"–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É üòå",
                           reply_markup=kb)

    db.set_msg_id(chat_id, msg.id)


@bot.message_handler(content_types=["text"])
def handle_text(message):
    chat_id = message.chat.id
    stage = db.get_stage(chat_id)

    if stage != Stages.ADDING.value:
        bot.send_message(chat_id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é :(\n\n"
                                  "–ï—Å–ª–∏ –∑–∞–ø—É—Ç–∞–ª—Å—è, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /start")
        return

    words = rm.find_nearest(message.text.capitalize())

    if len(words) == 0:
        bot.send_message(chat_id, "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ :(")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–æ–∑–º–æ–∂–Ω–æ –º—ã —É–∂–µ –Ω–∞—à–ª–∏ –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–ª–æ–≤–æ
    for w in words:
        if message.text.lower() == w.lower():
            db.add_ingredient(chat_id, message.text.capitalize())
            kb = types.InlineKeyboardMarkup(row_width=1)
            kb.add(types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data=f"ready"))

            msg_id = db.get_msg_id(chat_id)

            msg = bot.send_message(chat_id=chat_id, text=create_add_text(chat_id, db),
                                   reply_markup=kb)
            db.set_msg_id(chat_id, msg.id)

            if msg_id != -1:
                bot.delete_message(chat_id=chat_id, message_id=msg_id)
            return

    # –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å
    msg_id = db.get_msg_id(chat_id)

    msg = bot.send_message(chat_id, text="–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –∏–º–µ–ª –≤–≤–∏–¥—É –∫–∞–∫–∏–µ-—Ç–æ –∏–∑ —ç—Ç–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤?",
                           reply_markup=create_possible_kb(words))

    db.set_msg_id(chat_id, msg.id)

    if msg_id != -1:
        try:
            bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception as e:
            print(f"Problem while deleting message: {str(e)} ", file=sys.stderr)


@bot.callback_query_handler(func=lambda call: True)
def handle_start(call):
    chat_id = call.message.chat.id
    msg_id = call.message.id

    if call.data in ["start", "ready"]:
        db.set_stage(chat_id, Stages.MENU.value)
        bot.edit_message_text(chat_id=chat_id, text=create_menu_text(chat_id, db),
                              reply_markup=create_menu_kb(chat_id, db), message_id=msg_id)

    elif call.data == "add":
        db.set_stage(chat_id, Stages.ADDING.value)
        kb = types.InlineKeyboardMarkup(row_width=1)
        kb.add(types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data=f"ready"))
        bot.edit_message_text(chat_id=chat_id, text=create_add_text(chat_id, db),
                              reply_markup=kb, message_id=msg_id)

    elif call.data == "final":
        db.set_stage(chat_id, Stages.MENU.value)
        bot.delete_message(chat_id=chat_id, message_id=msg_id)
        bot.send_message(chat_id=chat_id, text=create_menu_text(chat_id, db),
                         reply_markup=create_menu_kb(chat_id, db))

    elif call.data == "delete":
        db.set_stage(chat_id, Stages.DELETE.value)
        bot.edit_message_text(chat_id=chat_id, text="–í—ã–±–µ—Ä–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å",
                              reply_markup=create_delete_kb(chat_id, db), message_id=msg_id)

    elif call.data.startswith("remove"):
        _, index = call.data.split("_")
        index = int(index)
        length = db.pop_ingredient(chat_id, index)

        if length > 0:
            db.set_stage(chat_id, Stages.DELETE.value)
            bot.edit_message_text(chat_id=chat_id, text="–í—ã–±–µ—Ä–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å",
                                  reply_markup=create_delete_kb(chat_id, db), message_id=msg_id)
        else:
            db.set_stage(chat_id, Stages.MENU.value)
            bot.edit_message_text(chat_id=chat_id, text=create_menu_text(chat_id, db),
                                  reply_markup=create_menu_kb(chat_id, db), message_id=msg_id)

    elif call.data.startswith("add"):
        _, name = call.data.split("_")
        db.add_ingredient(chat_id, name)
        db.set_stage(chat_id, Stages.MENU.value)
        bot.edit_message_text(chat_id=chat_id, text=create_menu_text(chat_id, db),
                              reply_markup=create_menu_kb(chat_id, db), message_id=msg_id)

    elif call.data == "find":
        user = db.get_user(chat_id)
        bot.edit_message_text(chat_id=chat_id, text="–ü—Ä–æ–∏–∑–≤–æ–∂—É –∑–∞–ø—Ä–æ—Å –∫ —Å–∞–π—Ç—É... –ù–µ–º–Ω–æ–∂–∫–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ\n\n"
                                                    "–ö—Å—Ç–∞—Ç–∏, –∞ –≤—ã –∑–Ω–∞–ª–∏ —á—Ç–æ –≤ –æ–¥–Ω–æ–º —è–±–ª–æ–∫–µ –≤—Å–µ–≥–æ 80 –∫–∫–∞–ª?"
                                                    " –ö—É—à–∞–π—Ç–µ —Ñ—Ä—É–∫—Ç—ã! üçè",
                              message_id=msg_id)

        recipies = rm.parse_web(user["ingredients"])

        if len(recipies) == 0:
            kb = types.InlineKeyboardMarkup(row_width=1)
            kb.add(types.InlineKeyboardButton(text="–ü–æ–Ω—è—Ç–Ω–æ", callback_data=f"final"))
            bot.edit_message_text(chat_id=chat_id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å —ç—Ç–∏–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏ –Ω–µ –Ω–∞—à–ª–æ—Å—å :(\n\n"
                                                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                                  reply_markup=kb, message_id=msg_id)
        else:
            db.set_stage(chat_id, Stages.CHECKING_RECIPIES.value)
            db.set_recipies(chat_id, recipies)
            kb = types.InlineKeyboardMarkup(row_width=1)
            kb.add(types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"recipy_1_2"))
            kb.add(types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data=f"final"))
            bot.delete_message(chat_id=chat_id, message_id=msg_id)

            bot.send_photo(chat_id=chat_id, caption=create_recipy_text(recipies[0]),
                           reply_markup=kb, photo=recipies[0]["link"], parse_mode='HTML')

    elif call.data.startswith("recipy"):
        _, ind, page_ind = call.data.split("_")
        ind = int(ind)
        page_ind = int(page_ind)

        recipies = db.get_recipies(chat_id)
        user = db.get_user(chat_id)
        if ind >= len(recipies):
            recipies = rm.parse_web(user["ingredients"], page_ind + 1)

            if len(recipies) == 0:
                kb = types.InlineKeyboardMarkup(row_width=1)
                kb.add(types.InlineKeyboardButton(text="–ü–æ–Ω—è—Ç–Ω–æ", callback_data=f"final"))
                bot.edit_message_text(chat_id=chat_id,
                                      text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å —ç—Ç–∏–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω–∞—à–ª–æ—Å—å :(\n\n"
                                           "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                                      reply_markup=kb, message_id=msg_id)
            else:
                db.set_stage(chat_id, Stages.CHECKING_RECIPIES.value)
                db.set_recipies(chat_id, recipies)
                kb = types.InlineKeyboardMarkup(row_width=1)
                kb.add(types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"recipy_1_{page_ind + 1}"))
                kb.add(types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data=f"final"))
                bot.delete_message(chat_id=chat_id, message_id=msg_id)

                bot.send_photo(chat_id=chat_id, caption=create_recipy_text(recipies[0]),
                               reply_markup=kb, photo=recipies[0]["link"], parse_mode='HTML')

        else:
            kb = types.InlineKeyboardMarkup(row_width=2)
            kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"recipy_{ind - 1}_{page_ind}"),
                   types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"recipy_{ind + 1}_{page_ind}"))
            kb.add(types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data=f"final"))
            bot.delete_message(chat_id=chat_id, message_id=msg_id)

            bot.send_photo(chat_id=chat_id, caption=create_recipy_text(recipies[ind]),
                           reply_markup=kb, photo=recipies[ind]["link"], parse_mode='HTML')


if __name__ == '__main__':
    bot.polling()
