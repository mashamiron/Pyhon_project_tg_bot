from typing import List

import database
from telebot import types


def create_menu_text(user_id: int, db: database.DataBase) -> str:
    user = db.get_user(user_id)

    if len(user["ingredients"]) == 0:
        return (f"{user['name']}, —Ç—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n\n"
                "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç ü•ï\", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

    text = "–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:\n\n"

    for i, item in enumerate(user["ingredients"]):
        text += f"{i + 1}. {item}\n"

    text += "\n"
    text += "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç üç≥\", —á—Ç–æ–±—ã —è –Ω–∞—á–∞–ª –∏—Å–∫–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ —ç—Ç–∏–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º."

    return text


def create_menu_kb(user_id: int, db: database.DataBase) -> types.InlineKeyboardMarkup:
    user = db.get_user(user_id)
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç ü•ï", callback_data=f"add"))

    if len(user["ingredients"]) == 0:
        return kb

    kb.add(types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç ‚ùå", callback_data=f"delete"))
    kb.add(types.InlineKeyboardButton(text="–ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç üç≥", callback_data=f"find"))

    return kb


def create_add_text(user_id: int, db: database.DataBase) -> str:
    user = db.get_user(user_id)

    if len(user["ingredients"]) == 0:
        return "–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞, –∞ —è –¥–æ–±–∞–≤–ª—é –µ–≥–æ –≤ —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫ üìú"

    text = ("–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞, –∞ —è –¥–æ–±–∞–≤–ª—é –µ–≥–æ –≤ —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫ üìú\n\n"
            "–¢–µ–∫—É—â–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n\n")

    for i, item in enumerate(user["ingredients"]):
        text += f"{i + 1}. {item}\n"

    text += "\n"
    text += "–ö–∞–∫ –∑–∞–∫–æ–Ω—á–∏—à—å, –∂–º–∏ –∫–Ω–æ–ø–∫—É \"–ì–æ—Ç–æ–≤–æ ‚úÖ\""

    return text


def create_delete_kb(user_id: int, db: database.DataBase) -> types.InlineKeyboardMarkup:
    user = db.get_user(user_id)

    kb = types.InlineKeyboardMarkup(row_width=1)

    for i, item in enumerate(user["ingredients"]):
        kb.add(types.InlineKeyboardButton(text=item, callback_data=f"remove_{i}"))

    kb.add(types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data=f"ready"))

    return kb


def create_possible_kb(words: List[str]) -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup(row_width=1)

    for item in words:
        kb.add(types.InlineKeyboardButton(text=item, callback_data=f"add_{item}"))

    kb.add(types.InlineKeyboardButton(text="–¢—É—Ç –Ω–µ—Ç –º–æ–µ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞", callback_data=f"ready"))

    return kb


def create_recipy_text(recipy: dict) -> str:
    text = f"<b>{recipy['name']}</b>\n\n"
    text += f"{recipy['desc']}\n\n"
    text += "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n\n"
    for ing in recipy['ingredients']:
        text += f"- {ing}\n"

    text += f"\n<i>–†–µ—Ü–µ–ø—Ç –ø–æ —Å—Å—ã–ª–∫–µ:</i> {recipy['link']}"

    return text
